package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"

	"github.com/peace/pokedex/graph/model"
)

// PokemonCreate is the resolver for the pokemonCreate field.
func (r *mutationResolver) PokemonCreate(ctx context.Context, input model.PokemonInput) (*model.Pokemon, error) {
	if input.ID != nil {
		return nil, fmt.Errorf("id must be null")
	}

	newPokemon := model.Pokemon{
		Name:        input.Name,
		Description: input.Description,
		Category:    input.Category,
		Type:        input.Type,
		Abilities:   input.Abilities,
	}

	err := r.DB.AddPokemon(ctx, &newPokemon)
	if err != nil {
		return nil, err
	}

	return &newPokemon, nil
}

// PokemonUpdate is the resolver for the pokemonUpdate field.
func (r *mutationResolver) PokemonUpdate(ctx context.Context, input model.PokemonInput) (*model.Pokemon, error) {
	if input.ID == nil {
		return nil, fmt.Errorf("id must not be null")
	}

	_, err := r.DB.FindPokemonById(ctx, *input.ID)
	if err != nil {
		return nil, err
	}

	pokemon := model.Pokemon{
		ID:          *input.ID,
		Name:        input.Name,
		Description: input.Description,
		Category:    input.Category,
		Type:        input.Type,
		Abilities:   input.Abilities,
	}

	err = r.DB.UpdatePokemon(ctx, &pokemon)
	if err != nil {
		return nil, err
	}

	return &pokemon, nil
}

// PokemonDelete is the resolver for the pokemonDelete field.
func (r *mutationResolver) PokemonDelete(ctx context.Context, id string) (bool, error) {
	err := r.DB.DeletePokemon(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Pokemons is the resolver for the pokemons field.
func (r *queryResolver) Pokemons(ctx context.Context) ([]*model.Pokemon, error) {
	return r.DB.FindAllPokemons(ctx)
}

// PokemonByID is the resolver for the pokemonById field.
func (r *queryResolver) PokemonByID(ctx context.Context, id string) (*model.Pokemon, error) {
	return r.DB.FindPokemonById(ctx, id)
}

// PokemonByName is the resolver for the pokemonByName field.
func (r *queryResolver) PokemonByName(ctx context.Context, name string) (*model.Pokemon, error) {
	return r.DB.FindPokemonByName(ctx, name)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
